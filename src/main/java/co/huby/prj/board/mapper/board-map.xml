<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="co.huby.prj.board.mapper.BoardMap">
	<!-- 기업에게 매치해서 추천해주는거 -->
	<select id="getMatchedListForCompany"
		parameterType="co.huby.prj.vo.VideoVo" resultType="map">
		SELECT DISTINCT
		c.code_name as "code_name",
		v.video_id as "video_id",
		v.video_contents
		as "video_contents",
		v.video_img as "video_img",
		v.member_id as
		"member_id"
		FROM code c
		Join video v
		ON c.code_id = v.hashtag
		Join
		employments e
		ON e.hope_job = v.hashtag
		WHERE e.company_id =#{company_id
		, jdbcType=VARCHAR}
		AND v.video_id NOT IN (
		SELECT video_id
		FROM
		like_video
		WHERE company_id =#{company_id , jdbcType=VARCHAR})
	</select>

	<!-- 기업이 영상에 좋아요 버튼을 클릭할경우 테이블에 저장되는거. -->
	<insert id="videoLikeInsertFromCompany"
		parameterType="co.huby.prj.vo.VideoVo">
		INSERT INTO like_video
		VALUES (
			LIKE_VIDEO_SEQ.nextval, #{video_id}, 
			(select member_id from video where video_id= #{video_id}), #{company_id})
	</insert>

	<!-- 기업이 낸 공고 조회하기 -->
	<select id="getCompany_Employments" parameterType="string"
		resultType="map">
		select e.*, (select count(*) from apply where e.employment_id = apply.employment_id) as applycnt 
		from employments e 
		where company_id = #{value,
		jdbcType=VARCHAR}
	</select>

	<!-- 기업이 낸 공고에 지원한 사람 목록 보기. -->
	<select id="getCompany_ApplyList" parameterType="string"
		resultType="map">
		SELECT A.apply_id as "apply_id", A.apply_date as
		"apply_date", A.employment_id as "employment_id", A.member_id as
		"member_id",
		A.resume_id as "resume_id",
		E.employment_title as
		"employment_title", E.employment_time as "employment_time",
		M.member_name as "member_name",
		R.resume_title as "resume_title"
		FROM
		apply A
		JOIN member M
		ON A.member_id = M.member_id
		JOIN employments E
		ON
		A.employment_id = E.employment_id
		JOIN resume R
		ON A.resume_id =
		R.resume_id
		WHERE E.company_id =#{companyid ,jdbcType=VARCHAR} and
		A.employment_id =
		#{listviewid, jdbcType=VARCHAR}
		ORDER BY
		E.employment_time
	</select>

	<select id="get_apply_member_info"
		parameterType="co.huby.prj.vo.ApplyVo" resultType="map">
		SELECT
		R.resume_title as "resume_title",
		R.resume_coment as "resume_coment",
		R.hope_salary as "hope_salary",
		R.hope_job as "hope_job",
		R.hope_location as "hope_location",
		R.final_education as "final_education",
		M.member_name as "member_name", 
		M.member_id as "member_id",
		M.member_birth as "member_birth",
		M.member_tel as "member_tel",
		M.member_gender as "member_gender",
		M.member_email as "member_email",
		M.member_photo as "member_photo",
		M.member_addr as "member_addr",
		V.video_id as "video_id",
		V.video_contents as "video_contents",
		V.video_img as "video_img",
		V.hashtag as "hashtag",
		V.video_location as "video_location",
		C.code_name as "code_name"
        FROM apply A
        JOIN member M
        ON a.member_id = m.member_id
            JOIN resume R
            ON a.resume_id = R.resume_id
                JOIN video v
                ON v.video_id = a.video_id
                    JOIN code c
                    ON v.hashtag = c.code_id
                        where a.apply_id = #{apply_id, jdbcType=VARCHAR}
	</select>


	<select id="get_career" parameterType="string" resultType="map">
		SELECT
		TO_CHAR(ca.start_date, 'yyyy-MM-dd') as START_DATE,
		TO_CHAR(ca.end_date, 'yyyy-MM-dd') as END_DATE,
		ca.company_name,
		ca.career_content,
		c.code_name,
		ca.job_position,
		ca.member_id
		FROM career ca
		JOIN code C
		ON
		ca.job = c.code_id
		WHERE ca.member_id = #{value}
	</select>


	<select id="get_habit" parameterType="string" resultType="map">
		SELECT 
		HABIT_NAME, 
		TO_CHAR(HABIT_START_DATE, 'yyyy-MM-dd') as HABIT_START_DATE, 
		TO_CHAR(HABIT_LOG_DATE,'yyyy-MM-dd') as HABIT_LOG_DATE, 
		HABIT_ID,
		CNT, 
		MEMBER_ID 
		FROM 
		HABIT 
		WHERE 
		MEMBER_ID=#{value}
	</select>

	<select id="get_skills" parameterType="string" resultType="map">
		SELECT * FROM SKILLS WHERE MEMBER_ID = #{value}
	</select>

	<select id="get_exp" parameterType="string" resultType="map">
		SELECT 
		EXPERIENCE_ID,
		TO_CHAR(E_START_DATE, 'yyyy-MM-dd') as E_START_DATE,
		TO_CHAR(E_END_DATE, 'yyyy-MM-dd') as E_END_DATE,
		EXPERIENCE_TITLE,
		EXPERIENCE_PLACE_NAME,
		EXPERIENCE_ACTION,
		MEMBER_ID
		FROM EXPERIENCE WHERE MEMBER_ID =#{value}
	</select>

	<select id="get_video" parameterType="VideoVo"
		resultType="VideoVo">
		SELECT
		* FROM VIDEO WHERE video_id = #{video_id}
	</select>

	<select id="get_resume" parameterType="ResumeVo"
		resultType="ResumeVo">
		select * from resume where member_id = #{member_id} and
		select_resume = 'Y'
	</select>
	
	<!-- 기업이 영상에 좋아요 버튼을 다시클릭할경우 테이블에서 삭제됨. -->
	<delete id="videoLikeDeleteFromCompany"
		parameterType="co.huby.prj.vo.LikeVideoVo">
		delete from like_video
		where video_id=#{video_id} and 
    	member_id = 
    	(select member_id from video
    	where video_id=#{video_id})
    	and company_id = #{company_id}
	</delete>
	
	<select id="comlikevideo" parameterType="co.huby.prj.vo.LikeVideoVo" resultType="map">
	SELECT 
    L.like_video_id, 
    L.video_id, 
    L.member_id, 
    L.company_id,
    v.video_contents,
    v.video_img,
    v.video_location, 
    c.code_name
    FROM LIKE_VIDEO L
    JOIN VIDEO v
    ON v.VIDEO_id = L.video_id
        JOIN code c
        On c.code_id = v.hashtag
    WHERE L.company_id =#{company_id, jdbcType=VARCHAR}
	</select>
	
	<!-- 기업이 공고 인설트 -->
	<insert id ="comWriteEmploy" parameterType="co.huby.prj.vo.EmploymentsVo">
	INSERT INTO EMPLOYMENTS (EMPLOYMENT_ID,
	EMPLOYMENT_TITLE,
	EMPLOYMENT_CONTENTS,
	HOPE_CAREER,
	HOPE_GRADUATE,
	HOPE_JOB_POSITION,
	HOPE_JOB,
	HOPE_LOCATION,
	HOPE_WORK_TYPE,
	EMPLOYMENT_PREFER,
	EMPLOYMENT_TIME,
	COMPANY_ID,
	HOPE_SALARY)
	VALUES(
		EMPLOYMENTS_SEQ.nextval, 
        #{employment_title},
        #{employment_contents},
        #{hope_career},
        #{hope_graduate},
        #{hope_job_position},
        #{hope_job},
        #{hope_location},
        #{hope_work_type},
        #{employment_prefer},
        #{employment_time},
        #{company_id},
        #{hope_salary})   
	</insert>
	
	<select id ="empListForCom"  parameterType="co.huby.prj.vo.EmploymentsVo" resultType="co.huby.prj.vo.EmploymentsVo">
	SELECT * FROM EMPLOYMENTS WHERE COMPANY_ID = #{company_id}
	</select>
	
	<select id ="get_empDetailsForCom"  parameterType="co.huby.prj.vo.EmploymentsVo" 
	resultType="co.huby.prj.vo.EmploymentsVo">
	SELECT * FROM EMPLOYMENTS WHERE EMPLOYMENT_ID =#{employment_id , jdbcType=VARCHAR}
	</select>
	
	<update id="modify_employment" parameterType="co.huby.prj.vo.EmploymentsVo" >
	UPDATE employments
		SET 
	EMPLOYMENT_TITLE = #{employment_title, jdbcType=VARCHAR},
	EMPLOYMENT_CONTENTS = #{employment_contents, jdbcType=VARCHAR},
	HOPE_CAREER = #{hope_career, jdbcType=VARCHAR},
	HOPE_GRADUATE =  #{hope_graduate, jdbcType=VARCHAR},
	HOPE_JOB_POSITION =#{hope_job_position, jdbcType=VARCHAR},
	HOPE_JOB =#{hope_job, jdbcType=VARCHAR},
	HOPE_LOCATION =#{hope_location, jdbcType=VARCHAR},
	HOPE_WORK_TYPE =#{hope_work_type, jdbcType=VARCHAR},
	EMPLOYMENT_PREFER =#{employment_prefer, jdbcType=VARCHAR},
	EMPLOYMENT_TIME = #{employment_time, jdbcType=DATE},
	COMPANY_ID =#{company_id, jdbcType=VARCHAR},
	HOPE_SALARY =#{hope_salary, jdbcType=VARCHAR}
	WHERE
	EMPLOYMENT_ID = #{employment_id, jdbcType=VARCHAR}
	</update>
	
	<delete id="delete_employment" parameterType="co.huby.prj.vo.EmploymentsVo">	
	DELETE FROM EMPLOYMENTS 
	WHERE EMPLOYMENT_ID = #{employment_id, jdbcType=VARCHAR}
	</delete>
	
	<delete id ="delete_like_video" parameterType="co.huby.prj.vo.LikeVideoVo">
	DELETE FROM 
		LIKE_VIDEO 
		WHERE COMPANY_ID =#{company_id, jdbcType=VARCHAR}
			AND LIKE_VIDEO_ID=#{like_video_id, jdbcType=VARCHAR}
	</delete>

	<select id ="get_list_video_all" parameterType="co.huby.prj.vo.VideoVo" resultType="map">
		SELECT DISTINCT
		C.CODE_NAME, 
		V.VIDEO_ID, 
		V.VIDEO_CONTENTS, 
		V.VIDEO_IMG,
		V.MEMBER_ID,
        V.VIDEO_LOCATION 
		FROM CODE C
		JOIN VIDEO V
		ON C.CODE_ID = V.HASHTAG
        ORDER BY VIDEO_ID DESC
	</select>
	
	<select id="get_video_list_more" resultType="map">
      SELECT 
        * 
        FROM
             (SELECT DISTINCT
        			ROWNUM as "RNUM",
					c.code_name, 
					v.video_id, 
					v.video_contents, 
					v.video_img,
					v.member_id,
        			v.video_location 
					FROM code c
						JOIN video v
						ON c.code_id = v.hashtag
                        WHERE v.video_id NOT IN (SELECT VIDEO_ID FROM LIKE_VIDEO WHERE COMPANY_ID =#{companyid ,jdbcType=VARCHAR})
        				ORDER BY v.video_id desc)
                        WHERE "RNUM"  <![CDATA[<=]]> (4+#{count, jdbcType=INTEGER}) AND "RNUM" <![CDATA[>=]]> (1+#{count, jdbcType=INTEGER})
   </select>
	
	<select id ="get_matched_video_List_more" resultType="map">
		SELECT * FROM (        
			(select ROWNUM AS "RNUM", InnerQuery.* from
    		(SELECT DISTINCT
       	
			c.code_name as "code_name",
			v.video_id as "video_id",
			v.video_contents as "video_contents",
			v.video_img as "video_img",
			v.video_location as "video_location",
			v.member_id as "member_id"
			FROM video v
			Join code c
			ON c.code_id = v.hashtag
       		WHERE v.hashtag 
                IN (select DISTINCT hope_job from employments where company_id=#{companyid ,jdbcType=VARCHAR})
        		AND v.video_id 
                NOT IN ( SELECT video_id FROM like_video WHERE company_id =#{companyid ,jdbcType=VARCHAR})
        ORDER BY v.video_id desc) InnerQuery))
        where RNUM <![CDATA[<=]]> (4+#{count ,jdbcType=INTEGER}) and RNUM <![CDATA[>=]]> (1+#{count ,jdbcType=INTEGER})
	</select>
	
	<!-- 개인회원 스크랩하기 버튼 클릭시 insert 되는 쿼리 -->
	<insert id="insert_to_employment_like" parameterType="co.huby.prj.vo.LikeEmploymentVo" >
	INSERT INTO LIKE_EMPLOYMENT 
            VALUES(LIKE_EMPLOYMENT_SEQ.NEXTVAL,
                   SYSDATE ,
                   NULL, 
                   #{member_id},
                   #{employment_id})
    </insert>
    
	<!-- 개인회원 스크랩한 내용과 목록 셀렉트 해주는 쿼리 -->
	<select id ="load_employment_like_list" parameterType="co.huby.prj.vo.LikeEmploymentVo" resultType="map">
	SELECT DISTINCT
               E.EMPLOYMENT_ID, 
               E.EMPLOYMENT_TITLE, 
               E.HOPE_JOB,
               C.CODE_NAME, 
               E.HOPE_WORK_TYPE, 
               E.EMPLOYMENT_TIME, 
               E.COMPANY_ID, 
               COM.COMPANY_NAME,
               L.EMPLOYMENT_LIKE_ID, 
               L.EMPLOYMENT_DATE, 
               L.EMPLOYMENT_LIKE_MEMO
        FROM EMPLOYMENTS E
        JOIN CODE C
        ON C.CODE_ID = E.HOPE_JOB
            JOIN COMPANY COM
            ON COM.COMPANY_ID = E.COMPANY_ID
            JOIN LIKE_EMPLOYMENT L
            ON L.EMPLOYMENT_ID = E.EMPLOYMENT_ID
            WHERE L.MEMBER_ID = #{member_id}
            ORDER BY employment_date DESC
	</select>
	<!-- 개인회원이 스크랩 삭제할 경우 딜리트 되는 쿼리 -->
	<delete id="delete_from_employment_like_list" parameterType="co.huby.prj.vo.LikeEmploymentVo">
	   DELETE FROM LIKE_EMPLOYMENT 
       WHERE 
       EMPLOYMENT_LIKE_ID= #{employment_like_id, jdbcType=VARCHAR}
	</delete>
	
	<!-- 개인회원이 스크랩 메모 추가할 경우 인설트 되는 쿼리 -->
	<update id="write_memo_for_Scrap" parameterType="co.huby.prj.vo.LikeEmploymentVo">
	 UPDATE like_employment
     SET employment_like_memo = #{employment_like_memo}
     WHERE employment_like_id = #{employment_like_id}
	</update>
	
	<select id ="get_one_employment_by_emp_id" parameterType="co.huby.prj.vo.EmploymentsVo"
		resultType="co.huby.prj.vo.EmploymentsVo">
	SELECT * from employments where employment_id = #{employment_id, jdbcType=VARCHAR}
	</select>
	
	<!-- 기업 now -->
	<select id="com_now_emp" parameterType="String" resultType="map">
	SELECT COUNT(*) as "com_now_emp" 
	FROM (SELECT 
			* FROM 
			EMPLOYMENTS 
			WHERE 
				COMPANY_ID =#{value, jdbcType=VARCHAR})
	</select>
	
	<select id="com_now_apply" parameterType="String" resultType="map">
	SELECT COUNT(*) as "com_now_apply" 
	FROM (SELECT 
			APPLY_ID FROM 
			APPLY 
			WHERE 
				EMPLOYMENT_ID IN (SELECT EMPLOYMENT_ID FROM EMPLOYMENTS WHERE COMPANY_ID = #{value, jdbcType=VARCHAR}))
	</select>
	
	<select id="com_now_interview" parameterType="String"  resultType="map">
	SELECT COUNT(INTERVIEW_ID) AS "com_now_interview" 
	FROM (SELECT INTERVIEW_ID FROM INTERVIEW WHERE COMPANY_ID=#{value, jdbcType=VARCHAR})
	</select>
	
	<!-- 개인 now -->

	<select id="mem_now_resume" parameterType="String" resultType="map">
	SELECT COUNT (*) as"mem_now_resume" FROM (SELECT RESUME_ID FROM RESUME WHERE MEMBER_ID =#{value, jdbcType=VARCHAR})
	</select>
	
	<select id="mem_now_video" parameterType="String" resultType="map">
	SELECT COUNT (*) as"mem_now_video" FROM (SELECT VIDEO_ID FROM VIDEO WHERE MEMBER_ID =#{value, jdbcType=VARCHAR})
	</select>
	
	<select id="mem_now_apply" parameterType="String" resultType="map">
	SELECT COUNT(*) as"mem_now_apply" FROM (SELECT APPLY_ID FROM APPLY WHERE MEMBER_ID=#{value, jdbcType=VARCHAR})
	</select>
	
	<select id="mem_now_interview" parameterType="String" resultType="map">
	SELECT COUNT(*) as"mem_now_interview" FROM (SELECT INTERVIEW_ID FROM INTERVIEW WHERE MEMBER_ID=#{value, jdbcType=VARCHAR})
	</select>
	
	<!-- 버튼 클릭마감 -->
	<update id="click_complete" parameterType="co.huby.prj.vo.EmploymentsVo">
		UPDATE employments
		SET 
		COMPLETE = #{complete, jdbcType=VARCHAR}
		WHERE
		EMPLOYMENT_ID = #{employment_id, jdbcType=VARCHAR}
	</update>
	
	<!-- 코드 아이디로 코드네임 가져오기 -->
	<select id="get_codeName" resultType="co.huby.prj.vo.CodeVo" parameterType="co.huby.prj.vo.CodeVo">
	SELECT 
    	CODE_ID ,
    	CODE_PART,
    	CODE_NAME ,
    	CODE_USE 
	FROM
    	CODE
	WHERE 
    	CODE_ID = #{code_id, jdbcType=VARCHAR}
	</select>

</mapper>

