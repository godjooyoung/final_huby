<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="co.huby.prj.chat.mapper.ChatMap">

	<insert id="createRoom"> <!-- 인터뷰 룸 개설 -->
		INSERT INTO interview
		VALUES(INTERVIEW_SEQ.nextval,NULL,NULL,NULL,NULL,sysdate,#{company_id},NULL,#{member_id},null)
	</insert>

	<select id="isRoom" resultType="InterviewVo"> <!-- 인터뷰 불러오기 -->
		SELECT * FROM interview WHERE
		interview_id = #{interview_id, jdbcType=VARCHAR}
	</select>

	<insert id="insertMessage"> <!-- 메시지 저장 -->
		insert into MESSAGE
		(message_id, message_sender, message_receiver,
		message_content, interview_id, member_id, company_id)
		values
		(MESSAGE_SEQ.nextval,#{message_sender},#{message_receiver},#{message_content},#{interview_id},#{member_id},#{company_id})
	</insert>

	<select id="getMessageList" resultType="MessageVo"> <!-- 대화내용 불러오기 -->
		select * from message
		where interview_id = #{interview_id, jdbcType=VARCHAR} order by
		message_id
	</select>

	<select id="getRoomList" resultType="map"> <!-- 개인회원 인터뷰 리스트 -->
		select
		i.interview_id as
		"interview_id",
		i.interview_start as
		"interview_start",
		m.member_name as "member_name", 
		m.member_photo as "member_photo", 
		c.company_name as "company_name",
		c.company_photo as "company_photo",
		i.member_id as
		"member_id", i.company_id as
		"company_id",
		i.employment_option as
		"employment_option"
		from interview
		i, member m, company c
		where
		i.member_id = m.member_id
		and i.company_id =
		c.company_id
		and
		m.member_id = #{member_id, jdbcType=VARCHAR}
	</select>

	<select id="getRoomList2" resultType="map"> <!-- 기업회원 인터뷰 리스트 -->
		select
		i.interview_id as
		"interview_id",
		i.interview_start as
		"interview_start",
		m.member_name as "member_name", 
		m.member_photo as "member_photo", 
		c.company_name as "company_name",
		c.company_photo as "company_phto",
		i.member_id as
		"member_id",
		i.company_id as "company_id",
		i.employment_option as
		"employment_option"
		from
		interview i, member m,
		company c
		where
		i.member_id = m.member_id
		and
		i.company_id = c.company_id
		and
		i.company_id = #{company_id,
		jdbcType=VARCHAR}
	</select>

	<select id="getRecentMessage" resultType="MessageVO">  <!-- 최근메세지 가져오기 -->
		select * from MESSAGE where interview_id = ${interview_id,
		jdbcType=VARCHAR} and
		rownum<![CDATA[<=]]>1
		order by message_id desc
	</select>

	<select id="getName" resultType="map"> <!-- 이름 사진 가져오기 -->
		select c.company_name, m.member_name, i.interview_id, c.company_photo, m.member_photo from company c, member
		m, interview i
		where i.company_id = c.company_id and i.member_id = m.member_id and
		interview_id = #{interview_id, jdbcType=VARCHAR}
	</select>

	<update id="updateReadTime">
		update MESSAGE set message_readTime = NOW() where
		company_id = #{company_id}
		AND resume_id = #{resume_id} AND
		message_readtime = message_sendtime
		and
		message_sender = company_id and
		member_id = #{member_id}
	</update>

	<update id="updateReadTimeCompany"> update MESSAGE set message_readTime = NOW() where
		company_id = #{company_id} AND resume_id = #{resume_id} AND
		message_readTime
		= message_sendTime and message_sender = member_id and
		member_id =
		#{member_id}
	</update>

	<select id="getUnReadCount" resultType="int"> select * from MESSAGE
		where member_id = #{member_id} and company_id = #{company_id} AND
		resume_id
		= #{resume_id} AND message_readtime = message_sendtime and
		message_sender
		= company_id
	</select>

	<select id="getUnReadCountCompany" resultType="int">
		select * from
		MESSAGE where company_id =#{company_id} and resume_id =
		#{resume_id}
		AND message_readtime = message_sendtime and message_sender = member_id
		and
		member_id = #{member_id}
	</select>

	<select id="getAllCount" resultType="int">
		select * from MESSAGE WHERE
		(company_id = #{company_id} and message_readtime
		= message_sendtime and
		message_sender != #{member_id}) or (member_id =
		#{member_id}
		and
		message_readtime = message_sendtime and message_sender !=
		#{member_id})
	</select>
</mapper>
